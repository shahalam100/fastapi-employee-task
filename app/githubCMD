Step 1: .gitignore
------------------

# Python cache
__pycache__/
*.py[cod]
*.pyo
*.pyd

# Virtual environment
env/
venv/
.venv/

# IDE configs
.vscode/
.idea/

# OS generated
.DS_Store
Thumbs.db

# FastAPI / Uvicorn logs
*.log

# Database (⚠️ normally ignored, but we allow SQLite for learning)
# Uncomment next line in real projects
# *.db

# If you’re using alembic migrations
alembic/versions/*.pyc

# Environment variables (never push secrets)
.env


Step 2. git init
Step 3. git config user.email "test125@gmail.com"
Step 4. git config user.name "shahalam100"
Step 5. Commit your Changes :: git commit -m "Initial commit with FastAPI project"
Step 6. git remote add origin https://github.com/your-username/fastapi-employee-task.git
Step 7. git add .
Step 8. git branch -M main
        git push -u origin main


#in env file:
----------------

# For SQLite:
DATABASE_URL = sqlite:///./dev.db

# Change this in real life!
SECRET_KEY=super-secret-change-me
ACCESS_TOKEN_EXPIRE_MINUTES=60


#Folder Sctructure:
-------------------

fastapi-employee-task/
│
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── config.py
│   ├── database.py
│   ├── models.py
│   ├── schemas.py
│   ├── auth.py
│   ├── deps.py
│   ├── middleware.py
│   ├── routers/
│   │   ├── __init__.py
│   │   ├── auth.py
│   │   ├── users.py
│   │   └── tasks.py


==================================================================================================================================================================================================================

# For committing updated files (that are already pushed to GitHub but modified again), use the following commands to commit and push the changes:

Step 1 : git status
Step 2 : git add app/updated_file
Step 3 : git commit -m "Commint the updated file"
Step 4 : git push origin main


----------

📘 Git Workflow (Adding New Files / Updating Project)

Step 1 : Create a new file (example: README.md)

        New-Item README.md

Step 2 : Stage the file for commit

        git add README.md

        **(Tip: Use git add . to stage all changed files instead of just one)

Step 3 : Commit with a message

        git commit -m "Add README.md with project details"

Step 4 : Push changes to GitHub

        git push origin main

Step 5 : Check repo status

        git status


-----------------


🔄 Quick Reference

Step 1 : Check repo status

        git status


Step 2 : Stage all modified files

        git add .


Step 3 : Commit all staged changes

        git commit -m "Your commit message"


Step 4 : Push to GitHub

        git push origin main


